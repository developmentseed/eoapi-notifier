# Default values for eoapi-notifier
replicaCount: 1

image:
  repository: ghcr.io/developmentseed/eoapi-notifier
  pullPolicy: IfNotPresent
  tag: ""

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  name: ""

podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

# Application configuration
config:
  logLevel: INFO
  sources:
    - type: postgres
      config:
        host: postgresql
        port: 5432
        database: postgis
        username: postgres
        password: password

  outputs:
    - type: mqtt
      config:
        broker_host: mqtt-broker
        broker_port: 1883

    - type: cloudevents
      config:
        source: /eoapi/pgstac
        event_type: org.eoapi.stac.item
        destination:
          # Use ref for Knative resources
          ref:
            apiVersion: messaging.knative.dev/v1
            kind: Broker
            name: eoapi-broker
            namespace: serverless
          # Alternatively, use url for direct HTTP endpoints
          # url: https://example.com/webhook

# Secrets
secrets:
  postgresql:
    create: true
    username: postgres
    password: password

# Environment variables
# These will be injected as environment variables and automatically override config values
# Use plugin-prefixed variables: PGSTAC_PASSWORD, MQTT_USERNAME, CLOUDEVENTS_ENDPOINT, etc
#
# CloudEvents destination options:
# - destination.ref: Kubernetes resource reference (uses SinkBinding)
# - destination.url: Direct HTTP endpoint
env: {}
  # Examples - Standard environment variables:
  # PGSTAC_HOST: postgresql-service
  # PGSTAC_PORT: "5432"
  # PGSTAC_PASSWORD: secret-password
  # MQTT_BROKER_HOST: mqtt-broker-service
  # MQTT_USE_TLS: "true"
  #
  # CloudEvents examples:
  # CLOUDEVENTS_SOURCE: /eoapi/stac/production
  # CLOUDEVENTS_EVENT_TYPE: org.eoapi.stac.item
  # K_SINK: https://my-service.default.svc.cluster.local (set by SinkBinding)
